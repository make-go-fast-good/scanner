const Keys = require("./getSCANNERSKeys");
class dataRow {
  constructor(_index = 0) {
    this.index = _index;
    this.barcode = "";
    this.scannerName = "";
    this.bitField = "";
    this.data = {};
  }
}

const process = function processPlcData(_data, _num = 0) {
    // console.log("data here: ")
    // console.log(_data)
  //if there's no data leave.
  if (!_data) return;

  //Since data is one big object we want to grab all the keys to use array functions (36400 keys)
  const dataKeys = Object.keys(_data);

  let plcData = [];

  //lets construct our object
  for (let i = 0; i < 1; i++) {

    //Add one so the index starts at one in the table.
    plcData[i] = new dataRow(i);

    // console.log('dataKeys')
    // console.log(dataKeys)

    //row is an array of the raw object keys from the callback function
    let row = dataKeys.filter(val => {
      //We want the keys to be between (4.0 - 92.0) - (i * 92)
      return parseFloat(val) <= (i * 186) + 186 && parseFloat(val) >= 4 + (i * 186);
    });

    console.log("row here:")
    // row = _data;
    console.log(row)

    //iterate through the dataKeys array and create a sensible structure
    dataKeys.forEach((key, index) => {
      // change from boolean to string representation so the data table can read.
      if (_data[key] === true) _data[key] = "true";
      if (_data[key] === false) _data[key] = "false";

      if (index >= 2 && index <= 9) {
        // build a string from the char array
        plcData[i].scannerName += _data[key];
        // build a bit field string that consists of 1s and 0s
      }
        else if (index >= 19 && index <= 118) {
         _data[key] === true ? _data[key] = 1 : _data[key] = 0;
        // build a string from the char array
        plcData[i].bitField += _data[key] + "";
      }
        else if (index >= 120 && index <= 159) {
        // build a string from the char array
        plcData[i].barcode += _data[key];
      }
        else {
        // normal key
        plcData[i]._data[Keys[index]] = _data[key];
      }
        ////remove the white space
      //plcData[i].barcode = plcData[i].barcode.trim();
      //plcData[i].scannerName = plcData[i].scannerName.trim();
      //plcData[i].bitField = plcData[i].bitField.trim();
        console.log('plcData')
        console.log(plcData[i])
    });

  }

  return plcData;
}

module.exports = process
