#![cfg_attr(
  all(not(debug_assertions), target_os = "windows"),
  windows_subsystem = "windows"
)]

use std::{
  io::{BufRead, BufReader},
  process::{Command, Stdio},
};

use tauri;
use tauri::api::command;
mod cmd;

fn main() {
  tauri::Builder::default()
    .invoke_handler(tauri::generate_handler![get_bin_command])
    .invoke_handler(tauri::generate_handler![spawn_s7_server])
    .run(tauri::generate_context!())
    .expect("error while running tauri application");
}

// Takes the name of the binary and returns the full path to its location
fn get_bin_command(name: &str) -> String {
  tauri::api::command::relative_command(
    tauri::api::command::binary_command(name.to_string()).unwrap(),
  )
  .unwrap()
}

// Spawns s7 server and loads url in webview
fn spawn_s7_server<T: 'static>(handle: &Handle<T>) {
  let s7_binary = get_bin_command("s7_Server");

  // Get stdout from binary
  let stdout = Command::new(s7_binary)
    // .args(vec!["run", s7_binary.as_str()])
    // .env("VSCODE_RIPGREP_PATH", get_bin_command("rg"))
    .stdout(Stdio::piped())
    .spawn()
    .expect("Failed to start s7 server");
}
